
*April, 2017: Version v2 - Federico Busato*

* GraphIO
    - Read 7 different formats:
        - Matrix Market
        - Metis (Dimacs10th)
        - SNAP
        - Dimacs9th
        - Binary
        - Koblenz Network Collection
        - Network Data Repository
    - Write 2 formats:
        - Matrix Market
        - Binary
    - Automatically detect directed/undirected
* Updaded README.md
* Updaded CMakeLists.txt
    - Automatically detect the Compute Capability and number of SMs
    - Automatically dectect maximum number of threads
    - Optimized "Release" compiler flags
    - Fast switch between compile types (debug, info, release)
* Updaded project directories structure
* Added empty build direcory
* Added doxygen configuration file (user/developer)
* Added script to download University of Florida sparse matrices
* Added a three small graph examples (.mtx .gr)
* Code Refactoring: (Google/LLVM style)
    - Substituted tab '\t' with 4 spaces
    - 80 columns max
    - NULL --> nullptr
    - Code alignment
    - int32_t -> int
    - typename -> using
    - malloc/free -> new/delete
    - reinterpret_cast, static_cast and const_cast instead of old style cast
    - Includes in alphabetical order
* Code convention in addition to LLVM/Google
    - _var for private variables
    - d_var for device variables and h_var for host variables
    - .hpp/.cpp for host code/CUDA API, .cuh/.cu device code
* cuStinger :
    - print function for small graph
    - batch generation: uniform/weighted sorted/unsorted
    - external configuration "config.inc"
    - improved load balancing
    - new memory management
    - graph consistency checking
    - store cuStinger graph snapshot to disk
    - CSR representation
    - Parsing of weighted graphs
- Added online documentation

TO DO:
* Code Related:
    - Consistent APIs
    - Working algorithms
    - Compression
    - Insert new vertices
    - Batch equal operators
    - Slightly improve load balancing: upper_bound early exit, variable host partitioning
    - Kernel Range-loop iterators
    - Understand performance difference between CSR and Helix
    - SpMV
    - Faster Initialization (device allocation)
    - Support 2^64 edges
    - GPU Graph Transpose
    - GPU graph generation
* Others
    - Regression test (ctest)
    - Add class diagram to doxygen


NOTES:
* Lambda expression limitations:
    - Cannot be used in class inline costructur
    - It captures "this" by default, also with [=] capture list
    - May be slower since __forceinline__ and __restrict__ are lost in template
* Pass function vs. struct as Operator:
    - Function must have fixed types. It requires explicit type casting
    - May be slower since __forceinline__ is lost in template
